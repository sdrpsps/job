import Core, { Config, SendOption, SendSuccess, SendFail, PagePerformanceStruct } from "../../core/src";
import { SetDataConfig } from './interface';
interface PagePerformanceConfig extends PagePerformanceStruct {
    setDataReportConfig: SetDataConfig;
}
export interface MpConfig extends Config {
    reportApiSpeed?: boolean;
    reportAssetSpeed?: boolean;
    beforeReportSpeed?: Function;
    onBeforeRequest?: Function;
    offlineLog?: boolean;
    offlineLogExp?: number;
    offlineLogLimit?: number;
    pagePerformance?: PagePerformanceConfig;
    enableHttp2?: boolean;
    setDataReportConfig?: SetDataConfig;
}
export default class Aegis extends Core {
    static sessionID: string;
    static asyncPluginIndex: number;
    originRequest: <T extends string | Record<string, any> | ArrayBuffer = string | Record<string, any> | ArrayBuffer>(option: WechatMiniprogram.RequestOption<T>) => WechatMiniprogram.RequestTask;
    speedLogPipeline: import("../../core/src").Pipeline<any, any>;
    constructor(config: MpConfig);
    get getBean(): string;
    initOfflineLog(): void;
    private requestQueue;
    private requesting;
    request: (options: SendOption, success?: SendSuccess | undefined, fail?: SendFail | undefined) => boolean | undefined;
    uploadLogs(params?: any, conds?: any): void;
    reportPv(id: number): void;
}
export {};
