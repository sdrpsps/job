import { NormalLog, SpeedLog, Config } from '../interface';
export { EventEmitter, InterfaceEventEmitter } from './event-emitter';
export declare const buildLogParam: (logs: NormalLog | NormalLog[]) => string;
export declare const buildLog2Json: (logs: NormalLog | NormalLog[]) => string;
interface P {
    [k: string]: any;
}
export declare const buildParam: (url: string, param: P) => string;
export declare const encodeOnce: (str: string) => string;
export declare enum ReportDefaultVal {
    number = -1,
    string = ""
}
export declare const getReportVal: <T>(rawVal?: T | undefined, isDefaultByString?: boolean | undefined) => T | ReportDefaultVal;
export declare const formatUrl: (url: string, isGetQuery?: boolean | undefined) => string;
export declare const urlIsHttps: (url: string) => boolean;
export declare const isNative: (Ctor: any) => boolean;
export declare const isRequestAsset: (contentType: string) => boolean;
interface TryToGetRetCodeRsp {
    code: string;
    isErr: boolean;
}
interface TryToGetRetCodeParams {
    url?: string;
    ctx?: any;
}
export declare const tryToGetRetCode: (obj: any, api?: Record<string, any> | undefined, params?: TryToGetRetCodeParams | undefined) => TryToGetRetCodeRsp;
/**
 * 判断cgi返回的code是否为错误code
 */
export declare const judgeIsErrorRet: (config: Config, ret: string) => boolean;
export declare const stringifyPlus: (target: any) => string;
export declare const stringify: (target: any) => string;
export declare const stringifyObj: (obj: any, deep?: number) => string;
/**
 * 获取xhr相关资源
 * 此类存在意义：是fetch请求和XMLHttpRequest请求的payload数据格式相同
 * @param {Any} data XMLHttpRequest对象
 */
export declare class PayloadXHR {
    type: string;
    data: any | {};
    constructor(data: any);
    sourceURL(): string;
    status(): number;
    headers(): object;
}
/**
 * 获取fetch相关资源
 * 此类存在意义：是fetch请求和XMLHttpRequest请求的payload数据格式相同
 * @param {Any} data fetch请求的response对象
 */
export declare class PayloadFetch {
    type: string;
    data: any | {};
    response: any | {};
    constructor(data: any, response: any);
    sourceURL(): string;
    status(): number;
    headers(): object;
}
export declare const generateAid: () => string;
export declare const speedShim: (logs: SpeedLog | SpeedLog[], bean: any) => any;
export declare const completionLogsKeys: (logs: any, keys: string[] | string) => any;
